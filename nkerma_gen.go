package main
import "fmt"
import "os"
import "bufio"
import "strings"
import "strconv"
import "math"
// Med. Phys. 26, 974 (1999).
// Total kerma coefficents (fGy m^2)
var elKerma = map[string]([]float64){
"E":{
		2.53E-08 ,3.60E-08 ,6.30E-08 ,1.10E-07 ,2.00E-07 ,3.60E-07 ,6.30E-07 ,1.10E-06 ,2.00E-06 ,3.60E-06,
		6.30E-06 ,1.10E-05 ,2.00E-05 ,3.60E-05 ,6.30E-05 ,1.10E-04 ,2.00E-04 ,3.60E-04 ,6.30E-04 ,1.10E-03,
		2.00E-03 ,3.60E-03 ,6.30E-03 ,1.10E-02 ,2.00E-02 ,3.60E-02 ,6.30E-02 ,8.20E-02 ,8.60E-02 ,9.00E-02,
		9.40E-02 ,9.80E-02 ,1.05E-01 ,1.15E-01 ,1.25E-01 ,1.35E-01 ,1.45E-01 ,1.55E-01 ,1.65E-01 ,1.75E-01,
		1.85E-01 ,1.95E-01 ,2.10E-01 ,2.30E-01 ,2.50E-01 ,2.70E-01 ,2.90E-01 ,3.10E-01 ,3.30E-01 ,3.50E-01,
		3.70E-01 ,3.90E-01 ,4.20E-01 ,4.60E-01 ,5.00E-01 ,5.40E-01 ,5.80E-01 ,6.20E-01 ,6.60E-01 ,7.00E-01,
		7.40E-01 ,7.80E-01 ,8.20E-01 ,8.60E-01 ,9.00E-01 ,9.40E-01 ,9.80E-01 ,1.05E+00 ,1.15E+00 ,1.25E+00,
		1.35E+00 ,1.45E+00 ,1.55E+00 ,1.65E+00 ,1.75E+00 ,1.85E+00 ,1.95E+00 ,2.10E+00 ,2.30E+00 ,2.50E+00,
		2.70E+00 ,2.90E+00 ,3.10E+00 ,3.30E+00 ,3.50E+00 ,3.70E+00 ,3.90E+00 ,4.20E+00 ,4.60E+00 ,5.00E+00,
		5.40E+00 ,5.80E+00 ,6.20E+00 ,6.60E+00 ,7.00E+00 ,7.40E+00 ,7.80E+00 ,8.20E+00 ,8.60E+00 ,9.00E+00,
		9.40E+00 ,9.80E+00 ,1.05E+01 ,1.15E+01 ,1.25E+01 ,1.35E+01 ,1.45E+01 ,1.60E+01 ,1.80E+01 ,2.00E+01,
		2.20E+01 ,2.40E+01 ,2.60E+01 ,2.80E+01 ,3.00E+01 ,3.50E+01 ,4.00E+01 ,4.50E+01 ,5.00E+01 ,5.50E+01,
		6.00E+01 ,6.50E+01 ,7.00E+01 ,7.50E+01 ,8.00E+01 ,8.50E+01 ,9.00E+01 ,9.50E+01 ,1.00E+02 ,1.10E+02,
		1.20E+02 ,1.30E+02 ,1.40E+02 ,1.50E+02},
"H":{
		4.21E-03 ,3.56E-03 ,2.69E-03 ,2.05E-03 ,1.53E-03 ,1.16E-03 ,9.12E-04 ,7.52E-04 ,6.75E-04 ,7.10E-04,
		8.88E-04 ,1.28E-03 ,2.11E-03 ,3.64E-03 ,6.26E-03 ,1.08E-02 ,1.96E-02 ,3.52E-02 ,6.15E-02 ,1.07E-01,
		1.93E-01 ,3.44E-01 ,5.92E-01 ,1.00E+00 ,1.73E+00 ,2.86E+00 ,4.41E+00 ,5.35E+00 ,5.52E+00 ,5.69E+00,
		5.87E+00 ,6.03E+00 ,6.30E+00 ,6.68E+00 ,7.04E+00 ,7.37E+00 ,7.69E+00 ,8.01E+00 ,8.30E+00 ,8.58E+00,
		8.86E+00 ,9.13E+00 ,9.50E+00 ,9.98E+00 ,1.04E+01 ,1.08E+01 ,1.13E+01 ,1.16E+01 ,1.20E+01 ,1.24E+01,
		1.27E+01 ,1.30E+01 ,1.35E+01 ,1.41E+01 ,1.47E+01 ,1.53E+01 ,1.58E+01 ,1.63E+01 ,1.68E+01 ,1.73E+01,
		1.77E+01 ,1.82E+01 ,1.86E+01 ,1.90E+01 ,1.94E+01 ,1.98E+01 ,2.02E+01 ,2.09E+01 ,2.18E+01 ,2.27E+01,
		2.35E+01 ,2.43E+01 ,2.50E+01 ,2.57E+01 ,2.64E+01 ,2.71E+01 ,2.77E+01 ,2.86E+01 ,2.97E+01 ,3.07E+01,
		3.17E+01 ,3.26E+01 ,3.34E+01 ,3.42E+01 ,3.50E+01 ,3.57E+01 ,3.63E+01 ,3.72E+01 ,3.83E+01 ,3.93E+01,
		4.01E+01 ,4.09E+01 ,4.16E+01 ,4.22E+01 ,4.28E+01 ,4.33E+01 ,4.37E+01 ,4.41E+01 ,4.45E+01 ,4.48E+01,
		4.51E+01 ,4.54E+01 ,4.58E+01 ,4.63E+01 ,4.66E+01 ,4.69E+01 ,4.70E+01 ,4.72E+01 ,4.72E+01 ,4.70E+01,
		4.67E+01 ,4.63E+01 ,4.59E+01 ,4.53E+01 ,4.48E+01 ,4.34E+01 ,4.23E+01 ,4.13E+01 ,4.04E+01 ,3.96E+01,
		3.89E+01 ,3.83E+01 ,3.78E+01 ,3.74E+01 ,3.71E+01 ,3.68E+01 ,3.67E+01 ,3.66E+01 ,3.66E+01 ,3.67E+01,
		3.71E+01 ,3.76E+01 ,3.83E+01 ,3.91E+01},

"C":{
		2.42E-06 ,2.06E-06 ,1.58E-06 ,1.23E-06 ,9.83E-07 ,8.47E-07 ,8.35E-07 ,9.72E-07 ,1.37E-06 ,2.17E-06,
		3.59E-06 ,6.11E-06 ,1.10E-05 ,1.97E-05 ,3.44E-05 ,6.00E-05 ,1.09E-04 ,1.96E-04 ,3.43E-04 ,5.98E-04,
		1.08E-03 ,1.95E-03 ,3.40E-03 ,5.92E-03 ,1.07E-02 ,1.87E-02 ,3.19E-02 ,4.12E-02 ,4.32E-02 ,4.52E-02,
		4.71E-02 ,4.91E-02 ,5.23E-02 ,5.68E-02 ,6.13E-02 ,6.58E-02 ,7.05E-02 ,7.62E-02 ,7.83E-02 ,8.23E-02,
		8.62E-02 ,9.00E-02 ,9.56E-02 ,1.03E-01 ,1.11E-01 ,1.18E-01 ,1.25E-01 ,1.31E-01 ,1.38E-01 ,1.44E-01,
		1.51E-01 ,1.56E-01 ,1.64E-01 ,1.75E-01 ,1.86E-01 ,1.95E-01 ,2.04E-01 ,2.13E-01 ,2.22E-01 ,2.29E-01,
		2.37E-01 ,2.44E-01 ,2.50E-01 ,2.57E-01 ,2.63E-01 ,2.69E-01 ,2.74E-01 ,2.84E-01 ,2.95E-01 ,3.06E-01,
		3.16E-01 ,3.25E-01 ,3.34E-01 ,3.42E-01 ,3.52E-01 ,3.61E-01 ,3.71E-01 ,4.57E-01 ,4.20E-01 ,4.71E-01,
		5.70E-01 ,8.00E-01 ,5.89E-01 ,9.07E-01 ,1.05E+00 ,1.01E+00 ,9.07E-01 ,7.28E-01 ,5.51E-01 ,5.15E-01,
		5.24E-01 ,5.56E-01 ,7.76E-01 ,4.57E-01 ,4.57E-01 ,8.01E-01 ,1.29E+00 ,8.56E-01 ,7.58E-01 ,1.20E+00,
		1.42E+00 ,1.21E+00 ,1.19E+00 ,1.45E+00 ,1.83E+00 ,1.95E+00 ,2.17E+00 ,2.49E+00 ,2.85E+00 ,2.92E+00,
		3.11E+00 ,3.30E+00 ,3.48E+00 ,3.66E+00 ,3.85E+00 ,4.26E+00 ,4.57E+00 ,4.77E+00 ,4.96E+00 ,5.11E+00,
		5.25E+00 ,5.62E+00 ,5.99E+00 ,6.14E+00 ,6.29E+00 ,6.40E+00 ,6.50E+00 ,6.78E+00 ,7.07E+00 ,8.18E+00,
		8.87E+00 ,9.67E+00 ,1.05E+01 ,1.13E+01},
"N":{
		7.88E-01 ,6.68E-01 ,5.04E-01 ,3.82E-01 ,2.84E-01 ,2.11E-01 ,1.60E-01 ,1.21E-01 ,8.97E-02 ,6.68E-02,
		5.05E-02 ,3.82E-02 ,2.84E-02 ,2.11E-02 ,1.60E-02 ,1.21E-02 ,9.11E-03 ,6.94E-03 ,5.53E-03 ,4.69E-03,
		4.42E-03 ,4.88E-03 ,6.22E-03 ,8.70E-03 ,1.30E-02 ,1.93E-02 ,2.77E-02 ,3.30E-02 ,3.40E-02 ,3.50E-02,
		3.60E-02 ,3.71E-02 ,3.88E-02 ,4.12E-02 ,4.35E-02 ,4.57E-02 ,4.79E-02 ,5.00E-02 ,5.22E-02 ,5.42E-02,
		5.62E-02 ,5.81E-02 ,6.10E-02 ,6.46E-02 ,6.80E-02 ,7.12E-02 ,7.44E-02 ,7.74E-02 ,8.02E-02 ,8.30E-02,
		8.57E-02 ,8.83E-02 ,1.24E-01 ,1.05E-01 ,1.73E-01 ,9.87E-02 ,9.76E-02 ,2.09E-01 ,2.69E-01 ,1.75E-01,
		1.47E-01 ,1.35E-01 ,1.27E-01 ,1.20E-01 ,1.11E-01 ,9.99E-02 ,1.30E-01 ,2.07E-01 ,2.03E-01 ,1.88E-01,
		4.62E-01 ,4.37E-01 ,2.93E-01 ,3.11E-01 ,4.83E-01 ,4.01E-01 ,3.27E-01 ,3.72E-01 ,5.09E-01 ,4.97E-01,
		6.52E-01 ,7.88E-01 ,9.98E-01 ,1.12E+00 ,1.42E+00 ,1.34E+00 ,1.61E+00 ,1.73E+00 ,1.41E+00 ,1.22E+00,
		9.94E-01 ,1.06E+00 ,1.22E+00 ,1.01E+00 ,1.11E+00 ,1.30E+00 ,1.28E+00 ,1.22E+00 ,1.12E+00 ,1.21E+00,
		1.39E+00 ,1.58E+00 ,1.84E+00 ,1.87E+00 ,2.08E+00 ,2.21E+00 ,2.44E+00 ,2.49E+00 ,2.55E+00 ,2.61E+00,
		2.81E+00 ,2.95E+00 ,3.04E+00 ,3.17E+00 ,3.33E+00 ,3.86E+00 ,4.31E+00 ,4.62E+00 ,4.92E+00 ,5.17E+00,
		5.43E+00 ,5.67E+00 ,5.91E+00 ,6.18E+00 ,6.45E+00 ,6.70E+00 ,6.95E+00 ,7.20E+00 ,7.44E+00 ,8.01E+00,
		8.70E+00 ,9.36E+00 ,9.97E+00 ,1.06E+01},
"O":{
		3.37E-08 ,3.24E-08 ,3.39E-08 ,4.20E-08 ,6.23E-08 ,1.02E-07 ,1.71E-07 ,2.92E-07 ,5.27E-07 ,9.45E-07,
		1.65E-06 ,2.88E-06 ,5.24E-06 ,9.42E-06 ,1.65E-05 ,2.88E-05 ,5.23E-05 ,9.42E-05 ,1.65E-04 ,2.88E-04,
		5.23E-04 ,9.41E-04 ,1.65E-03 ,2.87E-03 ,5.22E-03 ,9.34E-03 ,1.62E-02 ,2.11E-02 ,2.21E-02 ,2.31E-02,
		2.41E-02 ,2.51E-02 ,2.68E-02 ,2.94E-02 ,3.19E-02 ,3.44E-02 ,3.70E-02 ,3.95E-02 ,4.22E-02 ,4.48E-02,
		4.75E-02 ,5.01E-02 ,5.40E-02 ,5.97E-02 ,6.56E-02 ,7.20E-02 ,7.92E-02 ,8.77E-02 ,9.85E-02 ,1.13E-01,
		1.36E-01 ,1.79E-01 ,3.15E-01 ,1.78E-01 ,9.04E-02 ,8.85E-02 ,9.44E-02 ,1.01E-01 ,1.08E-01 ,1.15E-01,
		1.23E-01 ,1.31E-01 ,1.43E-01 ,1.61E-01 ,1.97E-01 ,2.88E-01 ,4.75E-01 ,3.91E-01 ,2.40E-01 ,2.63E-01,
		2.36E-01 ,1.85E-01 ,1.91E-01 ,2.44E-01 ,1.98E-01 ,2.76E-01 ,2.00E-01 ,1.90E-01 ,9.70E-02 ,1.50E-01,
		1.81E-01 ,1.91E-01 ,2.78E-01 ,5.57E-01 ,5.30E-01 ,5.92E-01 ,4.17E-01 ,4.85E-01 ,3.78E-01 ,6.26E-01,
		3.32E-01 ,4.95E-01 ,5.25E-01 ,7.80E-01 ,8.65E-01 ,1.02E+00 ,8.63E-01 ,8.60E-01 ,1.06E+00 ,1.01E+00,
		1.13E+00 ,1.36E+00 ,1.37E+00 ,1.77E+00 ,1.57E+00 ,1.73E+00 ,1.73E+00 ,1.84E+00 ,1.99E+00 ,2.14E+00,
		2.32E+00 ,2.45E+00 ,2.53E+00 ,2.63E+00 ,2.76E+00 ,3.11E+00 ,3.45E+00 ,3.70E+00 ,3.94E+00 ,4.27E+00,
		4.59E+00 ,4.84E+00 ,5.09E+00 ,5.27E+00 ,5.46E+00 ,5.68E+00 ,5.89E+00 ,6.17E+00 ,6.44E+00 ,6.86E+00,
		7.47E+00 ,8.13E+00 ,8.77E+00 ,9.25E+00},
"Al":{
		6.58E-05 ,5.58E-05 ,4.22E-05 ,3.20E-05 ,2.37E-05 ,1.77E-05 ,1.33E-05 ,1.01E-05 ,7.56E-06 ,5.70E-06,
		4.43E-06 ,3.56E-06 ,3.04E-06 ,2.97E-06 ,3.44E-06 ,4.71E-06 ,7.55E-06 ,1.28E-05 ,2.17E-05 ,3.73E-05,
		6.76E-05 ,1.20E-04 ,3.00E-04 ,3.46E-04 ,3.86E-04 ,8.30E-03 ,3.74E-03 ,2.00E-02 ,3.77E-02 ,3.81E-02,
		2.29E-02 ,1.49E-02 ,9.15E-03 ,1.13E-02 ,9.30E-03 ,1.30E-02 ,3.71E-02 ,3.89E-02 ,2.64E-02 ,1.75E-02,
		1.47E-02 ,1.73E-02 ,2.81E-02 ,2.06E-02 ,1.54E-02 ,1.31E-02 ,3.70E-02 ,3.25E-02 ,2.39E-02 ,1.99E-02,
		4.03E-02 ,2.27E-02 ,4.21E-02 ,4.23E-02 ,3.67E-02 ,4.72E-02 ,4.74E-02 ,4.15E-02 ,5.32E-02 ,4.22E-02,
		4.51E-02 ,7.52E-02 ,6.38E-02 ,6.74E-02 ,4.83E-02 ,5.02E-02 ,4.86E-02 ,5.20E-02 ,7.57E-02 ,6.57E-02,
		6.36E-02 ,7.54E-02 ,8.00E-02 ,7.70E-02 ,9.09E-02 ,7.72E-02 ,9.80E-02 ,1.06E-01 ,9.63E-02 ,1.07E-01,
		1.11E-01 ,1.10E-01 ,1.18E-01 ,1.25E-01 ,1.27E-01 ,1.33E-01 ,1.31E-01 ,1.41E-01 ,1.52E-01 ,1.68E-01,
		1.87E-01 ,2.14E-01 ,2.30E-01 ,2.55E-01 ,2.81E-01 ,3.10E-01 ,3.41E-01 ,3.67E-01 ,4.09E-01 ,4.46E-01,
		4.79E-01 ,5.12E-01 ,5.66E-01 ,6.70E-01 ,7.77E-01 ,9.05E-01 ,1.02E+00 ,1.09E+00 ,1.18E+00 ,1.27E+00,
		1.42E+00 ,1.57E+00 ,1.72E+00 ,1.88E+00 ,2.01E+00 ,2.30E+00 ,2.58E+00 ,2.87E+00 ,3.12E+00 ,3.38E+00,
		3.63E+00 ,3.87E+00 ,4.14E+00 ,4.39E+00 ,4.63E+00 ,4.96E+00 ,5.30E+00 ,5.66E+00 ,5.99E+00 ,6.56E+00,
		7.14E+00 ,7.78E+00 ,8.39E+00 ,9.02E+00},
"Si":{
		4.18E-05 ,3.54E-05 ,2.67E-05 ,2.03E-05 ,1.51E-05 ,1.12E-05 ,8.51E-06 ,6.46E-06 ,4.86E-06 ,3.71E-06,
		2.97E-06 ,2.56E-06 ,2.47E-06 ,2.86E-06 ,3.90E-06 ,5.98E-06 ,1.02E-05 ,1.78E-05 ,3.07E-05 ,5.32E-05,
		9.62E-05 ,1.71E-04 ,3.02E-04 ,5.02E-04 ,8.64E-04 ,1.36E-03 ,4.29E-03 ,3.00E-03 ,2.95E-03 ,2.85E-03,
		2.75E-03 ,2.66E-03 ,2.49E-03 ,2.09E-03 ,1.61E-03 ,1.10E-03 ,7.28E-04 ,2.22E-03 ,9.84E-03 ,3.35E-02,
		5.95E-02 ,5.83E-02 ,4.49E-02 ,3.56E-02 ,3.10E-02 ,2.89E-02 ,2.80E-02 ,2.76E-02 ,2.73E-02 ,2.79E-02,
		2.79E-02 ,2.95E-02 ,2.98E-02 ,3.11E-02 ,3.32E-02 ,5.00E-02 ,5.14E-02 ,3.10E-02 ,3.45E-02 ,3.65E-02,
		4.09E-02 ,5.73E-02 ,8.51E-02 ,4.84E-02 ,5.62E-02 ,7.11E-02 ,7.04E-02 ,4.80E-02 ,4.16E-02 ,6.14E-02,
		6.23E-02 ,7.07E-02 ,7.84E-02 ,1.27E-01 ,5.97E-02 ,9.50E-02 ,9.89E-02 ,7.69E-02 ,8.12E-02 ,1.00E-01,
		9.09E-02 ,1.00E-01 ,1.12E-01 ,1.04E-01 ,1.03E-01 ,8.62E-02 ,1.17E-01 ,1.34E-01 ,1.65E-01 ,1.75E-01,
		1.60E-01 ,2.18E-01 ,2.50E-01 ,3.22E-01 ,4.13E-01 ,5.44E-01 ,7.19E-01 ,6.84E-01 ,7.45E-01 ,7.69E-01,
		8.20E-01 ,8.69E-01 ,9.49E-01 ,1.05E+00 ,1.14E+00 ,1.21E+00 ,1.28E+00 ,1.33E+00 ,1.39E+00 ,1.45E+00,
		1.61E+00 ,1.74E+00 ,1.87E+00 ,2.00E+00 ,2.14E+00 ,2.43E+00 ,2.71E+00 ,2.95E+00 ,3.22E+00 ,3.54E+00,
		3.86E+00 ,4.12E+00 ,4.41E+00 ,4.69E+00 ,4.95E+00 ,5.19E+00 ,5.43E+00 ,5.69E+00 ,5.95E+00 ,6.48E+00,
		7.01E+00 ,7.63E+00 ,8.27E+00 ,9.00E+00},
"P":{
		3.49E-05 ,2.97E-05 ,2.21E-05 ,1.66E-05 ,1.22E-05 ,9.01E-06 ,6.80E-06 ,5.30E-06 ,4.04E-06 ,3.17E-06,
		2.65E-06 ,2.66E-06 ,3.33E-06 ,4.54E-06 ,6.60E-06 ,1.02E-05 ,1.72E-05 ,2.96E-05 ,5.07E-05 ,8.73E-05,
		1.57E-04 ,2.82E-04 ,5.50E-04 ,1.05E-03 ,1.53E-03 ,3.07E-03 ,5.24E-03 ,6.61E-03 ,6.90E-03 ,7.08E-03,
		6.60E-03 ,6.01E-03 ,5.58E-03 ,5.32E-03 ,4.86E-03 ,3.56E-03 ,6.65E-03 ,1.23E-02 ,7.64E-03 ,7.44E-03,
		1.21E-02 ,7.92E-03 ,1.17E-02 ,8.10E-03 ,1.36E-02 ,1.27E-02 ,1.33E-02 ,1.06E-02 ,1.14E-02 ,1.69E-02,
		3.00E-02 ,1.86E-02 ,2.14E-02 ,3.02E-02 ,2.17E-02 ,2.17E-02 ,3.05E-02 ,2.42E-02 ,2.42E-02 ,2.43E-02,
		2.43E-02 ,2.44E-02 ,2.44E-02 ,3.63E-02 ,3.46E-02 ,5.70E-02 ,4.20E-02 ,3.72E-02 ,5.31E-02 ,5.14E-02,
		5.37E-02 ,5.68E-02 ,6.06E-02 ,6.57E-02 ,7.11E-02 ,7.63E-02 ,8.16E-02 ,8.88E-02 ,9.77E-02 ,1.20E-01,
		1.46E-01 ,1.55E-01 ,1.81E-01 ,1.66E-01 ,1.70E-01 ,2.28E-01 ,2.18E-01 ,2.33E-01 ,2.66E-01 ,2.60E-01,
		2.95E-01 ,3.30E-01 ,3.69E-01 ,4.19E-01 ,4.65E-01 ,5.15E-01 ,5.69E-01 ,6.29E-01 ,6.95E-01 ,7.59E-01,
		8.07E-01 ,8.52E-01 ,9.17E-01 ,1.00E+00 ,1.08E+00 ,1.15E+00 ,1.18E+00 ,1.27E+00 ,1.39E+00 ,1.50E+00,
		1.47E+00 ,1.59E+00 ,1.69E+00 ,1.79E+00 ,1.90E+00 ,2.19E+00 ,2.49E+00 ,2.80E+00 ,3.10E+00 ,3.37E+00,
		3.65E+00 ,3.93E+00 ,4.18E+00 ,4.42E+00 ,4.68E+00 ,4.92E+00 ,5.16E+00 ,5.36E+00 ,5.60E+00 ,6.07E+00,
		6.58E+00 ,7.09E+00 ,7.61E+00 ,8.18E+00},
"Ca":{
		1.05E-03 ,1.10E-03 ,1.09E-03 ,1.08E-03 ,1.07E-03 ,1.07E-03 ,1.07E-03 ,1.06E-03 ,1.06E-03 ,1.06E-03,
		1.06E-03 ,1.06E-03 ,1.06E-03 ,1.06E-03 ,1.06E-03 ,1.06E-03 ,1.06E-03 ,1.07E-03 ,1.08E-03 ,1.09E-03,
		1.12E-03 ,1.16E-03 ,1.22E-03 ,1.32E-03 ,1.51E-03 ,1.66E-03 ,2.06E-03 ,2.52E-03 ,3.35E-03 ,4.16E-03,
		2.19E-03 ,2.70E-03 ,3.08E-03 ,2.32E-03 ,2.52E-03 ,1.29E-02 ,6.20E-03 ,4.11E-03 ,5.33E-03 ,1.27E-02,
		2.58E-03 ,2.17E-03 ,7.63E-03 ,5.98E-03 ,2.03E-02 ,1.02E-02 ,7.87E-03 ,3.91E-03 ,1.52E-02 ,1.12E-02,
		8.83E-03 ,6.37E-03 ,5.91E-03 ,1.01E-02 ,8.93E-03 ,5.89E-03 ,1.42E-02 ,2.42E-02 ,1.48E-02 ,1.08E-02,
		1.12E-02 ,1.57E-02 ,1.21E-02 ,1.87E-02 ,3.29E-02 ,2.23E-02 ,1.95E-02 ,2.30E-02 ,2.47E-02 ,3.01E-02,
		2.61E-02 ,3.26E-02 ,4.32E-02 ,4.84E-02 ,5.56E-02 ,5.74E-02 ,6.89E-02 ,8.35E-02 ,1.08E-01 ,1.51E-01,
		1.93E-01 ,2.60E-01 ,3.25E-01 ,3.84E-01 ,4.57E-01 ,5.18E-01 ,6.06E-01 ,7.22E-01 ,7.92E-01 ,8.63E-01,
		9.28E-01 ,9.97E-01 ,1.05E+00 ,1.09E+00 ,1.14E+00 ,1.18E+00 ,1.20E+00 ,1.20E+00 ,1.20E+00 ,1.21E+00,
		1.20E+00 ,1.18E+00 ,1.17E+00 ,1.19E+00 ,1.25E+00 ,1.34E+00 ,1.43E+00 ,1.57E+00 ,1.75E+00 ,1.94E+00,
		2.06E+00 ,2.25E+00 ,2.41E+00 ,2.56E+00 ,2.71E+00 ,3.04E+00 ,3.30E+00 ,3.57E+00 ,3.81E+00 ,4.03E+00,
		4.19E+00 ,4.31E+00 ,4.45E+00 ,4.69E+00 ,4.93E+00 ,5.18E+00 ,5.39E+00 ,5.62E+00 ,5.83E+00 ,6.31E+00,
		6.79E+00 ,7.30E+00 ,7.79E+00 ,8.27E+00},
"Fe":{
		2.06E-04 ,1.75E-04 ,1.32E-04 ,1.00E-04 ,7.48E-05 ,5.58E-05 ,4.20E-05 ,3.18E-05 ,2.37E-05 ,1.78E-05,
		1.37E-05 ,1.07E-05 ,8.78E-06 ,7.95E-06 ,8.43E-06 ,1.06E-05 ,1.55E-05 ,2.46E-05 ,3.88E-05 ,9.06E-05,
		9.38E-05 ,1.40E-04 ,1.97E-04 ,2.55E-04 ,1.76E-04 ,2.80E-03 ,1.48E-03 ,3.22E-03 ,6.49E-03 ,3.22E-03,
		2.37E-03 ,2.46E-03 ,2.11E-03 ,1.53E-03 ,1.71E-03 ,2.02E-03 ,8.89E-03 ,3.10E-03 ,2.78E-03 ,3.39E-03,
		5.27E-03 ,8.09E-03 ,3.09E-03 ,5.40E-03 ,3.22E-03 ,4.62E-03 ,4.50E-03 ,3.25E-03 ,7.09E-03 ,3.51E-03,
		7.24E-03 ,1.38E-02 ,1.08E-02 ,8.95E-03 ,9.10E-03 ,7.06E-03 ,6.80E-03 ,3.98E-03 ,9.99E-03 ,1.03E-02,
		1.71E-02 ,1.58E-02 ,1.09E-02 ,1.14E-02 ,7.92E-03 ,6.48E-03 ,1.20E-02 ,1.26E-02 ,1.20E-02 ,1.84E-02,
		1.58E-02 ,1.87E-02 ,1.94E-02 ,2.01E-02 ,2.09E-02 ,2.20E-02 ,2.69E-02 ,2.52E-02 ,2.82E-02 ,3.46E-02,
		3.43E-02 ,3.59E-02 ,3.91E-02 ,3.85E-02 ,3.91E-02 ,4.11E-02 ,4.24E-02 ,4.54E-02 ,4.70E-02 ,5.02E-02,
		5.44E-02 ,6.06E-02 ,6.89E-02 ,7.83E-02 ,8.77E-02 ,9.90E-02 ,1.10E-01 ,1.21E-01 ,1.33E-01 ,1.45E-01,
		1.56E-01 ,1.68E-01 ,1.89E-01 ,2.17E-01 ,2.48E-01 ,2.78E-01 ,3.12E-01 ,3.75E-01 ,4.60E-01 ,5.44E-01,
		6.31E-01 ,6.97E-01 ,7.58E-01 ,8.25E-01 ,9.09E-01 ,1.12E+00 ,1.33E+00 ,1.55E+00 ,1.78E+00 ,2.02E+00,
		2.24E+00 ,2.46E+00 ,2.68E+00 ,2.89E+00 ,3.10E+00 ,3.39E+00 ,3.62E+00 ,3.83E+00 ,4.04E+00 ,4.47E+00,
		4.88E+00 ,5.28E+00 ,5.69E+00 ,6.09E+00},
"Cu":{
		2.97E-04 ,2.52E-04 ,1.90E-04 ,1.44E-04 ,1.07E-04 ,7.95E-05 ,6.00E-05 ,4.53E-05 ,3.35E-05 ,2.48E-05,
		1.86E-05 ,1.39E-05 ,1.02E-05 ,7.56E-06 ,6.05E-06 ,5.59E-06 ,6.53E-06 ,9.52E-06 ,2.72E-04 ,2.42E-05,
		3.12E-04 ,1.33E-04 ,5.02E-04 ,8.43E-04 ,9.54E-04 ,1.42E-03 ,2.20E-03 ,3.96E-03 ,2.51E-03 ,2.78E-03,
		3.14E-03 ,2.52E-03 ,3.28E-03 ,2.75E-03 ,3.26E-03 ,4.21E-03 ,4.14E-03 ,4.14E-03 ,4.14E-03 ,4.44E-03,
		4.26E-03 ,5.21E-03 ,5.55E-03 ,5.45E-03 ,6.34E-03 ,5.35E-03 ,7.09E-03 ,7.15E-03 ,6.75E-03 ,7.30E-03,
		7.33E-03 ,6.97E-03 ,7.77E-03 ,9.68E-03 ,9.30E-03 ,9.64E-03 ,9.79E-03 ,1.05E-02 ,1.01E-02 ,1.04E-02,
		1.10E-02 ,1.09E-02 ,1.18E-02 ,1.19E-02 ,1.23E-02 ,1.27E-02 ,1.26E-02 ,1.37E-02 ,1.35E-02 ,1.48E-02,
		1.58E-02 ,1.66E-02 ,1.80E-02 ,1.93E-02 ,2.13E-02 ,2.31E-02 ,2.57E-02 ,2.85E-02 ,3.28E-02 ,3.75E-02,
		4.21E-02 ,4.68E-02 ,5.17E-02 ,5.66E-02 ,6.14E-02 ,6.58E-02 ,6.97E-02 ,7.50E-02 ,8.13E-02 ,8.72E-02,
		9.23E-02 ,9.72E-02 ,1.02E-01 ,1.08E-01 ,1.12E-01 ,1.18E-01 ,1.26E-01 ,1.34E-01 ,1.46E-01 ,1.67E-01,
		1.88E-01 ,2.17E-01 ,2.81E-01 ,3.60E-01 ,3.76E-01 ,3.74E-01 ,3.77E-01 ,4.81E-01 ,6.19E-01 ,7.57E-01,
		8.52E-01 ,9.60E-01 ,1.07E+00 ,1.17E+00 ,1.27E+00 ,1.52E+00 ,1.79E+00 ,2.05E+00 ,2.29E+00 ,2.52E+00,
		2.73E+00 ,2.94E+00 ,3.15E+00 ,3.35E+00 ,3.53E+00 ,3.72E+00 ,3.90E+00 ,4.09E+00 ,4.28E+00 ,4.66E+00,
		5.03E+00 ,5.41E+00 ,5.80E+00 ,6.20E+00},
"W":{
		4.60E-06 ,3.90E-06 ,2.94E-06 ,2.21E-06 ,1.63E-06 ,1.20E-06 ,8.88E-07 ,6.51E-07 ,4.60E-07 ,3.21E-07,
		2.30E-07 ,1.77E-07 ,1.52E-07 ,1.53E-07 ,2.03E-07 ,4.88E-06 ,4.55E-05 ,9.86E-06 ,1.86E-05 ,4.15E-05,
		4.08E-05 ,5.17E-05 ,7.27E-05 ,1.06E-04 ,1.62E-04 ,2.50E-04 ,3.65E-04 ,4.40E-04 ,4.54E-04 ,4.66E-04,
		4.78E-04 ,4.90E-04 ,5.19E-04 ,5.47E-04 ,5.81E-04 ,6.15E-04 ,6.48E-04 ,6.76E-04 ,7.08E-04 ,7.52E-04,
		7.78E-04 ,7.90E-04 ,8.20E-04 ,8.95E-04 ,9.30E-04 ,9.77E-04 ,1.04E-03 ,1.06E-03 ,1.10E-03 ,1.14E-03,
		1.17E-03 ,1.25E-03 ,1.35E-03 ,1.45E-03 ,1.52E-03 ,1.58E-03 ,1.67E-03 ,1.76E-03 ,1.87E-03 ,1.96E-03,
		2.03E-03 ,2.14E-03 ,2.23E-03 ,2.30E-03 ,2.36E-03 ,2.45E-03 ,2.51E-03 ,2.60E-03 ,2.76E-03 ,2.93E-03,
		3.09E-03 ,2.90E-03 ,7.80E-05 ,1.00E-05 ,1.33E-03 ,2.70E-03 ,1.64E-03 ,6.43E-03 ,1.32E-02 ,1.44E-02,
		1.44E-02 ,1.49E-02 ,1.76E-02 ,2.06E-02 ,2.23E-02 ,2.28E-02 ,2.26E-02 ,2.61E-02 ,2.91E-02 ,2.86E-02,
		3.59E-02 ,4.23E-02 ,4.25E-02 ,3.70E-02 ,3.08E-02 ,3.09E-02 ,3.14E-02 ,3.31E-02 ,3.42E-02 ,3.37E-02,
		3.42E-02 ,3.47E-02 ,3.49E-02 ,3.28E-02 ,3.31E-02 ,3.37E-02 ,3.48E-02 ,3.67E-02 ,3.91E-02 ,4.16E-02,
		5.62E-02 ,7.42E-02 ,9.60E-02 ,1.22E-01 ,1.52E-01 ,2.40E-01 ,3.40E-01 ,4.50E-01 ,5.62E-01 ,6.74E-01,
		7.89E-01 ,9.10E-01 ,1.04E+00 ,1.16E+00 ,1.27E+00 ,1.38E+00 ,1.48E+00 ,1.59E+00 ,1.69E+00 ,1.89E+00,
		2.10E+00 ,2.31E+00 ,2.53E+00 ,2.78E+00},
"Pb":{
		4.50E-10 ,4.55E-10 ,5.26E-10 ,7.14E-10 ,1.13E-09 ,1.91E-09 ,3.26E-09 ,5.62E-09 ,1.02E-08 ,1.83E-08,
		3.19E-08 ,5.58E-08 ,1.01E-07 ,1.82E-07 ,3.19E-07 ,5.57E-07 ,1.01E-06 ,1.82E-06 ,3.19E-06 ,5.56E-06,
		1.01E-05 ,1.81E-05 ,3.16E-05 ,5.46E-05 ,9.77E-05 ,1.71E-04 ,3.86E-04 ,4.27E-04 ,4.25E-04 ,3.99E-04,
		4.10E-04 ,4.23E-04 ,4.45E-04 ,5.88E-04 ,5.19E-04 ,5.50E-04 ,5.73E-04 ,6.42E-04 ,6.56E-04 ,6.60E-04,
		6.84E-04 ,7.08E-04 ,7.42E-04 ,7.84E-04 ,8.22E-04 ,9.01E-04 ,8.96E-04 ,9.16E-04 ,9.71E-04 ,1.65E-03,
		1.12E-03 ,1.02E-03 ,1.07E-03 ,8.02E-04 ,4.58E-04 ,1.38E-03 ,1.19E-03 ,1.37E-03 ,1.21E-03 ,1.33E-03,
		1.70E-03 ,1.49E-03 ,2.31E-03 ,1.98E-03 ,1.49E-03 ,1.78E-03 ,1.81E-03 ,1.85E-03 ,2.24E-03 ,2.57E-03,
		2.47E-03 ,2.84E-03 ,2.62E-03 ,3.33E-03 ,3.87E-03 ,3.05E-03 ,3.68E-03 ,4.19E-03 ,4.94E-03 ,5.15E-03,
		5.84E-03 ,5.93E-03 ,6.24E-03 ,6.86E-03 ,6.30E-03 ,6.54E-03 ,6.57E-03 ,6.76E-03 ,7.00E-03 ,7.34E-03,
		7.72E-03 ,7.90E-03 ,8.14E-03 ,8.06E-03 ,8.10E-03 ,8.54E-03 ,9.23E-03 ,9.83E-03 ,1.00E-02 ,1.02E-02,
		1.06E-02 ,1.08E-02 ,1.11E-02 ,1.21E-02 ,1.30E-02 ,1.47E-02 ,1.68E-02 ,2.37E-02 ,3.29E-02 ,4.22E-02,
		5.14E-02 ,6.06E-02 ,6.99E-02 ,7.91E-02 ,8.83E-02 ,1.60E-01 ,2.60E-01 ,3.54E-01 ,4.57E-01 ,5.60E-01,
		6.64E-01 ,7.62E-01 ,8.55E-01 ,9.45E-01 ,1.02E+00 ,1.11E+00 ,1.21E+00 ,1.29E+00 ,1.39E+00 ,1.58E+00,
		1.78E+00 ,1.97E+00 ,2.16E+00 ,2.34E+00},
}
type elem struct {
	ratio float64
	kerma []float64
	name  string
}
var elWeight = map[string]float64 {
	"H" : 1.0079,"C" :12.0107,"N" :14.0067,"O" :15.9994,
	"Al":26.9815,"Si":28.0855,"P" :30.9738,"Ca":40.0780,
	"Fe":55.8450,"Cu":63.5460,"W" :183.840,"Pb":207.200,}
func main() {
	if len(os.Args)==1 {
		fmt.Println("usage: ",os.Args[0]," [filename]")
		return
	}
	file,err:=os.Open(os.Args[1])
	if err!=nil {
		fmt.Println(err)
		return
	}
	defer file.Close()
	isWeight:=true
	dens:=1.0
	ofn:=""
	elList:=make(map[string]elem)
	lc:=0
	seg:=0.0
	base:=0.0
	from:=0.0
	to:=0.0
	writekermafile:=func()error{
		if ofn=="" {
			return fmt.Errorf("error: no file name is set.\nno output.")
		} else if len(elList)==0 {
			return fmt.Errorf("error: no element is set.\nno output.")
		}
		buf:=make([]float64,len(elKerma["H"]))
		totweight:=0.
		for key,value:=range(elList){
			rat:=func()float64{
				if !isWeight {
					return elWeight[key]
				}
				return 1.
			}()
			value.ratio*=rat
			totweight+=value.ratio
			for i:=0;i<len(buf);i++ {
				buf[i]+=value.kerma[i]*rat*dens
			}
		}
		ofs,err:=os.Create(ofn+".nker")
		if err!=nil {
			panic(err)
		}
		defer ofs.Close()
		ev:=elKerma["E"]
		fmt.Fprintln(ofs,"# ")
		fmt.Fprintln(ofs,"# generated by ",os.Args[0])
		fmt.Fprintf(ofs,"# from input file \"%s\"\n",os.Args[1])
		fmt.Fprintln(ofs,"# ")
		fmt.Fprintln(ofs,"# elements: wt%")
		for key,vv:=range(elList){
			fmt.Fprintf(ofs,"#\t\t%s: %.4f\n",key,100.*vv.ratio/totweight)
			fmt.Fprintf(ofs,"#\t\t%s: %.4f\n",key,100.*vv.ratio)
			fmt.Fprintf(ofs,"#\t\t%s: %.4f\n",key,totweight)
		}
		fmt.Fprintf(ofs,"# \n")
		fmt.Fprintf(ofs,"# rho: %v g/cm^3\n",dens)
		fmt.Fprintf(ofs,"# \n")
		if seg*base==0.0 {
			fmt.Fprintf(ofs,"# E = default\n")
		} else {
			fmt.Fprintf(ofs,"# E = log_[%v](i/[%v])\n",base,seg)
		}
		fmt.Fprintf(ofs,"# range = %e - %e MeV\n",func()float64{if from==0.0 { return ev[0]}; return from }()/1e6,func()float64{if to==0.0 { return ev[len(ev)-1]}; return to}()/1e6)
		fmt.Fprintf(ofs,"# \n")
		fmt.Fprintf(ofs,"# En[MeV] Coeff.[pGy cm^2]\n")
		if seg*base==0.0||from*to==0.0 {
			for i:=0;i<len(buf);i++ {
				eng:=ev[i]*1e6
				if eng>from&&(to!=0.0&&eng<to){
					fmt.Fprintf(ofs,"%e\t%e\n",ev[i],10.*buf[i]/totweight) // 10. is a conversion factor from [fGy m^2] to [pGy cm^2]
				}
			}
		}else{
			ilbase:=1./math.Log(base)
			i2e:=func(i int)float64{
				return from*math.Pow(base,float64(i)/seg)
			}
			e2i:=func(e float64)int{
				return int(math.Log(e/from)*ilbase*seg)
			}
			end:=e2i(to)+1
			j:=0
			calP:=func()(float64,float64,float64,float64){
				return math.Log(ev[j]),math.Log(ev[j+1]),math.Log(buf[j]),math.Log(buf[j+1])
			}
			lx0,lx1,ly0,ly1:=calP()
			calQ:=func(){
				lx0,lx1,ly0,ly1=calP()
			}
			krm:=func(en float64)float64{
				return math.Exp((ly1-ly0)*(math.Log(en)-lx0)/(lx1-lx0)+ly0)
			}
			for i:=0;i<=end;i++{
				eng:=i2e(i)/1e6
				if eng<ev[j]||eng>ev[j+1] {
					if eng<ev[0] {
						j=0
					} else if eng>ev[len(ev)-1] {
						j=len(ev)-2
					} else {
						for {
							if (eng>ev[j]&&eng<ev[j+1])||j==len(ev)-2 {
								break
							}
							j++
						}
					}
					calQ()
				}
				val:=krm(eng)
				fmt.Fprintf(ofs,"%e\t%e\n",eng,10.*val/totweight)
			}
		}
		return nil
	}
	str2eV:=func(s string)(float64,error){
		if len(s)<2||s[len(s)-2:]!="eV" {
			f,e:=strconv.ParseFloat(s,64)
			if e!=nil {
				return 0,e
			}
			if f<0 {
				return f,fmt.Errorf("invalid value(negative:%v)",f)
			}
			return f,nil
		}
		le,o:=func()(int,float64){
			str:=s[len(s)-3:]
			switch(str){
				case "peV":
					return 3,1.0e-12
				case "neV":
					return 3,1.0e-9
				case "ueV":
					return 3,1.0e-6
				case "meV":
					return 3,1.0e-3
				case "keV":
					return 3,1.0e+3
				case "MeV":
					return 3,1.0e+6
				case "GeV":
					return 3,1.0e+9
				case "TeV":
					return 3,1.0e+12
				default:
					return 2,1.0
			}
		}()
		f,e:=strconv.ParseFloat(s[:len(s)-le],64)
		if e!=nil {
			return 0,e
		}
		return f*o,nil
	}
	scanner:=bufio.NewScanner(file)
	for scanner.Scan() {
		lc++
		line:=scanner.Text()
		if len(line)==0||line[0]=='#' { continue }
		line=func()string{
			i:=strings.Index(line,"#")
			if i<0 {
				return strings.TrimSpace(line)
			}
			return strings.TrimSpace(line[:i])
		}()
		if line[0]=='[' {
			l:=len(line)
			fnm,err:=func()(string,error){
				if line[0:2]=="[["&&line[l-2:]=="]]" {
					b:=strings.Fields(line[2:l-2])
					if len(b)==1 {
						return b[0],nil
					}
				}
				return "",fmt.Errorf("%s:%d: syntax error.\n>%s",os.Args[1],lc,line)
			}()
			if err!=nil {
				fmt.Println(err)
			} else {
				if len(elList)!=0&&ofn!=""{
					writekermafile()
				}
				ofn=fnm
				elList=make(map[string]elem)
			}
			continue
		}
		buf:=strings.Fields(line)
		if len(buf)==0 { continue }
		if len(buf)==1 {
			fmt.Println("syntax error")
			continue
		}
		err:=func()error{
			isOk:=func()bool{
				switch buf[0]{
					case "from":
						from,err=str2eV(buf[1])
						if err!=nil {
							fmt.Println(err)
							from=0.0
							return false
						}
						if len(buf)==4&&buf[2]=="to"{
							to,err=str2eV(buf[3])
							if err!=nil {
								fmt.Println(err)
								to=0.0
								return false
							}
						}
					case "to":
						to,err=str2eV(buf[1])
						if err!=nil {
							fmt.Println(err)
							to=0.0
							return false
						}
					case "divide":
						if len(buf)!=4||(len(buf)==4&&buf[2]!="per"){
							return false
						}
						if buf[3]=="decade" {
							base=10.0
						} else if buf[3]=="octal" {
							base=9.0
						} else if buf[3]=="twice" {
							base=2.0
						} else {
							b,e:=strconv.ParseFloat(buf[3],64)
							if e!=nil {
								return false
							}
							if b!=1.0 {
								base=b
							}
						}
						d,e:=strconv.ParseFloat(buf[1],64)
						if e!=nil {
							return false
						}
						seg=d
					case "el":
						if len(buf)!=3{
							return false
						}
						k,ok:=elKerma[buf[1]]
						if !ok {
							return false
						}
						v,e:=strconv.ParseFloat(buf[2],64)
						if e!=nil {
							return false
						}
						var el elem
						el.name=buf[1]
						el.ratio=v
						el.kerma=k
						_,ok=elList[buf[1]]
						if ok {
							delete(elList,buf[1])
						}
						elList[buf[1]]=el
					case "ratio":
						if len(buf)!=2||(buf[1]!="atom"&&buf[1]!="weight"){
							return false
						}
						isWeight=(buf[1]=="weight")
					case "density":
						if len(buf)!=2{
							return false
						}
						v,e:=strconv.ParseFloat(buf[1],64)
						if e!=nil {
							return false
						}
						dens=v
					default:
						return false
				}
				return true
			}()
			if isOk { return nil }
			return fmt.Errorf("%s;%d: syntax error.\n>%s",os.Args[1],lc,line)
		}()
		if err!=nil {
			fmt.Println(err)
		}
	}
	writekermafile()
	return
}
